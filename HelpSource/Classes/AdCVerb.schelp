TITLE:: AdCVerb
SUMMARY:: basic reverb based on Schroeder and Moorer-Loy
CATEGORIES:: UGens
RELATED:: DelayN, CombL, AllPassN

DESCRIPTION::
AdCVerb is a bank of comb filters going through a bank of allpass filters, with optional predelay. Basic input filtering is provided (high rolloff, DC removal), and it is easy and efficient to use for multichannel systems.

The overall structure is:
code::
     |||||   in (number of channels of input array, e.g. 5)
     \\|//	summed to
       |		mono
    /// \\\	fanning out to <numCombs> (e.g. 6 here)
    ||| |||   comb filters
     \\ //
       |		summed to mono
     //|\\    fanned to <nOuts> allpass chain channels for decorrelation/diffuseness;
     |||||	for each channel, a chain of <numAllpasses> allPasses,
     |||||	e.g. 3 here.
     |||||
_____________
	|||||	<nOuts> output channels.

// a basic sound example:
(
x = {
    var src, verb;
    src = Decay2.ar(Impulse.ar(0.5, 0.99), 0.001, 0.03, PinkNoise.ar(1));
    verb = AdCVerb.ar(src * 0.1);
    src + verb;
}.play;
)
x.free;
::

There is no specific design of first reflections; if there are no particular demands on the early reflections, those created by AdCVerb are often fully sufficient.
One can easily add first reflections, e.g. based on room geometry, by adding higher predelays, and creating a special purpose set of first reflections; in this usage context AdCVerb works well for global reverb tails.

The combTimes are hardcoded to be coloration-free (based on prime numbers), and they can be scaled. The allpassTimes are generated randomly based on prime number ratios, but can also be passed in if desired.


CLASSMETHODS::

METHOD:: verbose
if true, post the random-generated allpass times for precise rebuilding of specific times.

METHOD:: maxTime
get and set the maximum delay time for predelay, combs and allpasses. When maxTime is changed, the next instance of AdCVerb will have this maxdelaytime for combs, allpasses and predelay. Default value is 0.2.

METHOD:: ar
create an ar instance of AdCVerb.

ARGUMENT:: in
the audio inputs or inputs, which are converted to mono.

ARGUMENT:: revTime
reverb time for -60 db decay of the comb filters

ARGUMENT:: hfDamping
higher frequencies can be rolled of in the combs: 0.0 is no damping, 1.0 means high frequencies roll off significantly faster. (This uses the mild rolloff introduced by linear interpolation in CombL.)

ARGUMENT:: nOuts
number of output channels; each output gets its own group of allpass filters for density and decorrelation

ARGUMENT:: predelay
predelay before reverb tail begins, in seconds

ARGUMENT:: numCombs
number of combs used in reverb tail

ARGUMENT:: numAllpasses
number of allpasses used for decorrelating each out channel

ARGUMENT:: inFilter
a coefficient for reverb input filtering (OnePole); 0.0 is no filtering, 0.99 is very dark.

ARGUMENT:: leakCoeff
coefficient for a LeakDC which filters DC in the input sum, in order to avoid DC drift. default of 0.995 introduces rather little LF rolloff.

ARGUMENT:: combScale
scales all combTimes up to maxTime; can be used to adjust room size. default = 1.0

ARGUMENT:: apScale
scales all allpassTimes up to maxTime; can be used to adjust room size. default = 1.0

ARGUMENT:: allpassPrimes
an optional list of prime numbers for the allpass filters; providing them overrides numAllpasses and nOuts.

returns:: an instance of AdCVerb

EXAMPLES::

code::
	// simple use:
(
Ndef(\adcverb_help).play;
Ndef(\adcverb_help, {
	var src, verb;
	src = Decay2.ar(Impulse.ar(0.5, 0.99), 0.001, 0.03, PinkNoise.ar(1));
	verb = AdCVerb.ar(src * 0.1);
	src + verb;
});
)

    // tune all params:
Ndef(\adcverb_help).play;
NodeProxyEditor(Ndef(\adcverb_help));

(	// all params open for tuning:
Spec.add(\revTime, [0.01, 100, \exp]);
Spec.add(\hfDamping, [0, 1]);
Spec.add(\predelay, [0.0, 0.2, \amp]);
Spec.add(\revTime, [0.01, 100, \exp]);
Spec.add(\inFilter, [-0.99, 0.99]);
Spec.add(\leakCoeff, [0.8, 1.0]);
Spec.add(\combScale, [0.1, 2, \exp]);
Spec.add(\apScale, [0.1, 2, \exp]);

Ndef(\adcverb_help, { |revTime = 3, hfDamping = 0.1, predelay = 0.02,
		inFilter = 0.6, leakCoeff = 0.995, combScale = 1, apScale = 1|

	var src, verb;

	// replace with any sources you like
	src = Decay2.ar(Impulse.ar(0.5), 0.001, 0.03, PinkNoise.ar(1));

	verb = AdCVerb.ar(src * 0.1,
		revTime: revTime.lag(0.5),
		hfDamping: hfDamping.lag(0.5),
		nOuts: 2, 		// fixed number of decorrelated output channels
		predelay: predelay.lag(0.5),
		numCombs: 	8, 	// fixed number - increase for more density
		numAllpasses: 4, 	// fixed number - increase for more diffuseness
		inFilter: inFilter,
		leakCoeff: leakCoeff,
		combScale: combScale.lag(0.5), // lagged to
		apScale: apScale.lag(0.5)
	);
	src + verb;
});
)

::