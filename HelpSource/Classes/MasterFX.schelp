TITLE:: MasterFX
summary:: a highly configurable chain of effects on the main outputs
categories:: Control>Effects
related:: Classes/ProxyChain, Classes/ProxyChainGui

CLASSMETHODS::

METHOD:: initClass
(describe method here)

returns:: (describe returnvalue here)

METHOD:: new

ARGUMENT:: server
the server on which the MasterFX chain will run; default is server.numOutputBusChannels

ARGUMENT:: numChannels
the number of channels it will work on

ARGUMENT:: slotNames
the names of the filters/functions to be used, in order of execution;

ARGUMENT:: busIndex
the bus index where it will process audio.

returns:: (describe returnvalue here)


METHOD:: all
all masterFX, one per server, live here.

returns:: A dictionary

METHOD:: default
returns:: returns the MasterFX instance for the default server.

METHOD:: maxNumChans
returns:: maximum number of channels supported.

METHOD:: clear
clear a specific masterfx
ARGUMENT:: name

INSTANCEMETHODS::



METHOD:: gui
(describe method here)

ARGUMENT:: name
(describe argument here)

ARGUMENT:: numItems
(describe argument here)

ARGUMENT:: buttonList
(describe argument here)

ARGUMENT:: parent
(describe argument here)

ARGUMENT:: bounds
(describe argument here)

ARGUMENT:: makeSkip
(describe argument here)

returns:: (describe returnvalue here)











METHOD:: show
(describe method here)

returns:: (describe returnvalue here)

METHOD:: hide
(describe method here)

returns:: (describe returnvalue here)



METHOD:: clear
clear this MasterFX




METHOD:: pxChain
returns:: internally used ProxyChain.

METHOD:: numChannels
returns:: (describe returnvalue here)

METHOD:: server
returns:: server on which this MasterFX operates

METHOD:: busIndex
returns:: bus index on which the MasterFX operates

METHOD:: bus
returns:: bus

METHOD:: group
returns:: the group

METHOD:: add
kick in effect
ARGUMENT:: key
name of effect
ARGUMENT:: wet
wet-level of effect
ARGUMENT:: func
an optional func that can locally replace the global func with that name.

METHOD:: remove
kick out effect
ARGUMENT:: key
name of effect

EXAMPLES::

code::
(
s.boot;

// define which FX are going to be used.
// As MasterFX is based on ProxyChain, these FX are the same as in ProxyChain.
ProxyChain.add(
	\leakDC,  \filter -> { |in, leak=0.99| LeakDC.ar(in, leak) },
	\rollClip, \filter -> { |in, clip=0.99, pole=0.2|
		OnePole.ar(in.clip2(clip), pole ** 0.7);
	},
	\krush, \filter -> { |in, bits=16, downsamp=2|
		var down;
		in = in.round(0.5 ** bits);
		down = Latch.ar(in, Impulse.ar(SampleRate.ir / downsamp.max(2)));
		// below 1/2 downsamp, do xfade:
		blend(in, down, (downsamp - 1).clip(0, 1));
	},
	\ampFin, \filter -> { |in, limDrive=1, ampLimit=0.8, postAmp=1 |
		Limiter.ar(in * limDrive, ampLimit) * postAmp;
	}
);

// and specs for them (e.g. for gui control)
Spec.add(\leak, [0.5, 0.999, \exp]);
Spec.add(\clip, [0.0, 1, \amp]);
Spec.add(\pole, [0, 0.95, \lin]);
Spec.add(\bits, [16, 1]);
Spec.add(\downsamp, [1, 100, \exp]);
Spec.add(\limDrive, \ampx4);
Spec.add(\ampLimit, \amp);
Spec.add(\postAmp, \ampx4);
)


(
// An 8-channel MasterFX on server s.
// The order in slotNames determines order of execution of the efx.
m = MasterFX.new(server: s,
	numChannels: 8,
	slotNames: [\leakDC, \krush, \rollClip, \ampFin],
	busIndex: 0
);

g = m.gui; // a GUI
s.scope(8);
)

// a test signal
x = { PinkNoise.ar(0.5) * LFNoise2.kr([5, 8, 13, 21]).max(0); }.play;


// all MasterFX live here:
MasterFX.all;

// kick in predefined effects (at full wet level)
m.add(\leakDC, 1);
m.add(\rollClip, 1);
m.add(\dualComp, 1);
m.add(\ampFin, 1);

// kick out predefined effects (at full wet level)
m.remove(\leakDC);
m.remove(\rollClip);
m.remove(\krush);
m.remove(\ampFin);


(
// make a more specific GUI - see ProxyChainGui for details
m.gui(\Mestre, 20, [
	[\leakDC, \slotCtl, 1],
	[\rollClip, \slotCtl, 1],
	[\krush, \slotCtl, 1],
	[\ampFin, \slotCtl, 1],
	[\RESET, \extra, { m.pxChain.add(\leakDC, 1).add(\ampFin, 1) }],
])
)


// make a MasterFX on the internal server
MasterFX(Server.internal, 8, [\leakDC, \rollClip, \dualComp, \ampFin]);

// now there are two MasterFX, one localhost, one internal
MasterFX.all;

// removing a MasterFX by server name
MasterFX.clear(\localhost); // clear one specific masterfx

// or simply by
m.clear

// or clear all MasterFX
MasterFX.clear; // clear all mfxes


// all gone now:
MasterFX.all;
::