
TITLE:: SpatioScope
summary:: monitor volume levels on multiple speakers
categories:: GUI>Views
related:: Classes/Server, Classes/Stethoscope


DESCRIPTION::

SpatioScope has a layout of speaker positions in 2D space,
and shows the volume levels at each speaker's location.

code::
(
s.options.numOutputBusChannels = 4; s.reboot;

	// quick first example:
z = SpatioScope.new;	// default is 4 speakers

	// 4 chans of sound, randomly panning between
{ LFDNoise3.ar([2, 3, 5, 8] * 1000) * LFNoise2.kr([5, 8, 13, 21] * 0.1).max(0); }.play;

	// SpatioScopes survive cmd-period
thisProcess.stop;

x = { SinOsc.ar(100) * \amp.kr(0.2) }.play;
x.set(\amp, 1);
z.redLevel = 0.99;
z.redLevel = 1.0;
x.set(\amp, 1.1);
x.free;

{ PanAz.ar(4, ClipNoise.ar, LFSaw.kr(SinOsc.ar(0.03) * 2)) }.play;

	// stop and start by hand
z.stop;
z.start;
// hide also stops it
z.hide;
// show also starts it
z.show;

// shift the bus channels by an offset  - listen to out channels 4-7
z.busOffset_(8);
s.scope(4, 8);

// play something on these to check
{ Decay.ar(Impulse.ar(1, [1, 2, 3, 4] / 4), 0.01) }.play(outbus: 8);
// try changing the decayTime
z.set(\decayTime, 0.4);
z.set(\decayTime, 1);

~lfo = { SinOsc.kr([1, 2, 3, 4] / 4).range(0, 0.8) }.play;
s.scope(4, rate: \control);
z.krListen(0);

// back to audio out
z.arListen(0, 4);

::

CLASSMETHODS::

METHOD:: group
get and set the parent group of the listening synths
(to set a spcific order, or to load-balance with supernova)

METHOD:: new
code::
	// supply locations by hand - 1@1 is left bottom.
z = SpatioScope([ -0.5 @ -0.7, 0.5 @ -0.4, 0.8 @ 0.8, -0.5 @ 0.5, 0@0 ]);
::

ARGUMENT:: locations
locations in space of [-1, 1] for x and y

ARGUMENT:: server
which server to watch
ARGUMENT:: parent
which window or view to show the spatioScope on
ARGUMENT:: bounds
view bounds for the spatioScope
ARGUMENT:: busOffset
busOffset at which spatioScope begins to listen

METHOD:: grid
create a spatioScope with a grid of locations

code::
z = SpatioScope.grid(4,6);
::

ARGUMENT:: numx
number of locations per row

ARGUMENT:: numy
number of locations per column

ARGUMENT:: server
which server
ARGUMENT:: parent
which window or view to show the spatioScope on
ARGUMENT:: bounds
view bounds for the spatioScope


METHOD:: gridPos
create a grid of locations to use in a spatioScope
code::
SpatioScope.gridPos(2, 4).printAll;
SpatioScope.gridPos(4, 6).printAll;
::

METHOD:: ring
create a spatioScope with a ring of locations

code::
z = SpatioScope.ring(5);	// 1 is right
z = SpatioScope.ring(8);	// more speakers
z = SpatioScope.ring(8, 0.8);	// ring radius
z = SpatioScope.ring(5, 0.5, 0.5pi);	// radius, rotate location clockwise -> bottom
z = SpatioScope.ring(6, 0.5, pi);	// radius, rotate location clockwise -> left
z = SpatioScope.ring(7, 0.5, 1.5pi);	// radius, rotate location clockwise -> top

	// a ring + e.g. subwoofer in center
z = SpatioScope(SpatioScope.ringPos(6, 0.8, pi) ++ [0@0]);
::

ARGUMENT:: num
number of locations
ARGUMENT:: radius
radius of ring
ARGUMENT:: angleOffset
clockwise angle offset for location 1: 0 is right, 0.5pi is bottom, etc.

ARGUMENT:: server
which server
ARGUMENT:: parent
which window or view to show the spatioScope on
ARGUMENT:: bounds
view bounds for the spatioScope


METHOD:: ringPos
create an array of locations that form a ring
code::
SpatioScope.ringPos(5);
SpatioScope.ringPos(8);
::

METHOD:: rings
create a spatioScope with locations that form concentric rings
code::
z = SpatioScope.rings([8, 4]);	// 2 rings, outer ring is lower channels

z = SpatioScope.rings([8, 4], nil, -0.5pi);	// 1 on top
z = SpatioScope.rings([8, 4], [0.4, 0.75]);	// low chan numbers inside
z = SpatioScope.rings([12, 8, 4], nil, -0.5pi); // 3 rings

	// roughly the angle offsets for IEM CUBE
z = SpatioScope.rings([12, 8, 4], nil, (-0.5 + [0, 0.125, 0.25]) * pi);

	// roughly the Animax Dome setup in Bonn
z = SpatioScope.rings([16, 12, 8, 4], nil, (-0.5 + [0.0625, 0.083, 0.125, 0.25]) * pi);

	// test with several sources
{ { Ringz.ar(Dust2.ar(5), exprand(300, 10000), exprand(0.03, 0.1)) }.dup(z.numChannels) }.play;
::

ARGUMENT:: nums
number of speakers in each ring
ARGUMENT:: radii
the radii of each ring (nil distributes the radii between 0 and 1)
ARGUMENT:: angleOffsets
the angle offsets for each ring; if a single value, it applies to all rings.
ARGUMENT:: server
which server
ARGUMENT:: parent
which window or view to show the spatioScope on
ARGUMENT:: bounds
view bounds for the spatioScope


INSTANCEMETHODS::

private:: init, showLocs, updateViews, maxBusNum, defaultMouseDownAction, topZone
private:: getAmpValues, getAmpsFunc

METHOD:: gui

METHOD:: start, stop
start and stop the spatioScope

METHOD:: isOn
boolean whether spatioscope is running

METHOD:: show
show (and usually start) the spatioScope
METHOD:: hide
hide (and usually stop) the spatioScope

METHOD:: locations
Get the xy locations of the channels

METHOD:: magnify
get and set a factor by which to magnify amp levels shown

METHOD:: amps
the current amps measured

METHOD:: redLevel
get and set the amp level above which the meter turns redCol

METHOD:: redCol
get and set color for overload level display

METHOD:: ampAlpha
get and set amp colors transparency

METHOD:: arListen
tell spatio to listen to audio rate channels with:
ARGUMENT:: busIndex
ARGUMENT:: numChannels
ARGUMENT:: decayTime

METHOD:: krListen
tell spatio to listen to a control rate signal with:
ARGUMENT:: busIndex
ARGUMENT:: numChannels
ARGUMENT:: decayTime

METHOD:: rate
the rate and bus type to listen to: one of [\audio, \control]

METHOD:: busOffset
the bus channel from which to start listening
(see examples on top)

METHOD:: numChannels
The number of adjacent busses to listen to, which is inferred from the number of locations.

METHOD:: proxy
the nodeproxy which runs the observing synths
METHOD:: get, set
get and set parameters of the proxy.
usually, this is code::\decayTime:: and code::\busOffset::.

METHOD:: server, skipjack, resp
internal instance variables

METHOD:: parent, parentView, bounds
parent view or window of the spatioScope, and its initial bounds

METHOD:: startBtn, stopBtn, ampViews, magSlider
gui variables

METHOD:: background, foreground
get and set the background and foreground colors _before_
showing the spatioScope view

METHOD:: clickAction
the action to perform when a click happens on the spatioscope.
passes in the indices of the ampviews touched.

METHOD:: indicesFor
find indices of ampViews at a given point

EXAMPLES::

code::

// internal variables

z.locations	// knows its locations
z.server		// and its server
z.numChannels	// inferred from number of locations
z.offset		// zero by default, can be set so that outputs to watch begin at higher channels
z.proxy		// a proxy does the amp watching
z.resp		// a respondernode listen for the incoming amp values
z.skipjack	// a skipjack restarts the spatioscope after thisProcess.stop
z.parent		// its view
::

